<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | Ryan's Blog]]></title>
  <link href="http://ryan715.github.com/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://ryan715.github.com/"/>
  <updated>2017-04-05T22:00:00+08:00</updated>
  <id>http://ryan715.github.com/</id>
  <author>
    <name><![CDATA[Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration ElasticSearch to Rails]]></title>
    <link href="http://ryan715.github.com/blog/2015/10/01/integration-elasticsearch-to-rails/"/>
    <updated>2015-10-01T11:01:21+08:00</updated>
    <id>http://ryan715.github.com/blog/2015/10/01/integration-elasticsearch-to-rails</id>
    <content type="html"><![CDATA[<h3>导言</h3>

<p>  这两天项目要求，把现有的搜索改成ElasticSearch(后面简称es)。之前接触 过一些es，后来就开始捣鼓。记得railcasts上面有讲过相关视频，重温了下就  开始弄，没弄多久发现上面用的<a href="https://github.com/karmi/retire">tire</a>已经retire了。为了让更多的朋友们不走冤枉路，所以才有了此文。</p>

<h3>简介</h3>

<p>  大致说下什么是es，详细的<a href="https://en.wikipedia.org/wiki/Elasticsearch">Wikipedia</a>有介绍。es其实就是一个搜索的引擎，从开源项目lucene出来，lucene是java编写的，比较复杂，要使用它必须了解核心一大堆东西。es就是包装了一层，然后提供RESTFUL API调用，从而让全文搜索变得更加简单。</p>

<h3>过程</h3>

<h5>安装</h5>

<p>  在安装es之前，先安装jdk。
  Mac环境, 运行 <code>brew install elasticsearch</code>, 然后运行<code>elasticsearch --config=/usr/local/opt/elasticsearch/config/elasticsearch.yml</code>启动，访问<a href="http://localhost:9200"> http://localhost:9200</a>，访问成功就表示安装完成了。</p>

<p>  其他环境，访问<a href="http://elasticsearch.org/download">官网</a>相关安装包下载。</p>

<h5>使用</h5>

<p>  在Gemfile中加入</p>

<pre><code class="ruby "> gem 'elasticsearch-model' 
 gem 'elasticsearch-rails' 
</code></pre>

<p> 注意：es-model自带了分页插件，如果你在gemfile中有分页，如<code>will_paginate</code> 或者 <code>kaminari</code>，要把他们放到es-model和es-rails的前面。</p>

<p> 在需要添加搜索的model添加以下代码：</p>

<pre><code class="ruby"> class University &lt; ActiveRecord::Base
   include Elasticsearch::Model
   include Elasticsearch::Model::Callbacks
 end
</code></pre>

<p> 完成引用后，我们可以编写search方法了：</p>

<pre><code class="ruby"> def self.search(search)
    response = __elasticsearch__.search(search)
 end
</code></pre>

<p> 这是一个很简单的search，通过传入的参数直接进行检索。我们可以使用DSL来使我们的检索语句更加满足我们的业务需要，以下是我需要检索一个状态为1，并且从栏目名为name的一个检索:</p>

<pre><code class="ruby">def self.search_filter(params)
  response = __elasticsearch__.search(
      "query": {
        "filtered": {
          "filter":   {
            "bool": {
              "must":     { "term":  { "status": 1 }},
              "must": {
                "query": { 
                  "match": { "name": params }
                }
              }
            }
          }
        }
      }  
    )
end
</code></pre>

<p>关于es的DSL更多写法，大家可以访问<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_most_important_queries_and_filters.html">这里</a>。里面详细的讲解了query,filter等一些常用查询，大家可以根据业务需要自行改装。</p>

<p> 然后我们为model创建index, 主要给es使用：</p>

<pre><code class="ruby"> mapping dynamic: false do
   indexes :name
   indexes :tag
 end
</code></pre>

<p> 我们继续往下走，model是可以serialized成json的，我们使用<code>as_indexed_json</code>这个方法。我们可以这样写：</p>

<pre><code class="ruby"> def as_indexed_json(options={})
   self.as_json(
     only: [:id, :name, :description, :status],   
     include: { tags: { only: [:name]}}
   )
 end
</code></pre>

<p> <code>include</code>的部分是处理association的，<code>only</code>是model本身的字段属性。完成了以上调整，我们的model搜索基本完成了。如果你现在使用搜索，我估计还是搜索不出数据。我们要把数据导入给es，使用这个命令</p>

<pre><code class="bash"> rake environment elasticsearch:import:model CLASS='your_model_name' FORCE=y
</code></pre>

<p>好啦。基本就完成。es默认自带中文分词，但是有些posts反馈说不大好用，可以使用<a href="https://github.com/medcl/elasticsearch-rtf">es-rtf</a>，集成了中文的分词插件，下载直接可以用。必须要安装jdk，里面有详尽的使用方法。</p>

<h3>相关资料</h3>

<p>gem的<a href="https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model">README</a>,有耐心慢慢看可以了解很多</p>

<p>一些快速的tutorial</p>

<p><a href="http://www.sitepoint.com/full-text-search-rails-elasticsearch/">http://www.sitepoint.com/full-text-search-rails-elasticsearch/</a>
<a href="http://aaronvb.com/articles/intro-to-elasticsearch-ruby-on-rails-part-1.html">http://aaronvb.com/articles/intro-to-elasticsearch-ruby-on-rails-part-1.html</a>
<a href="http://www.spacevatican.org/2012/6/3/fun-with-elasticsearch-s-children-and-nested-documents/">http://www.spacevatican.org/2012/6/3/fun-with-elasticsearch-s-children-and-nested-documents/</a></p>

<p>可以了解，railcast的es介绍 <a href="http://railscasts.com/episodes/306-elasticsearch-part-1">http://railscasts.com/episodes/306-elasticsearch-part-1</a></p>
]]></content>
  </entry>
  
</feed>
